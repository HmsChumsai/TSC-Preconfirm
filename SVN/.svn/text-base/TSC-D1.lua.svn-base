-- Last Modified Date: 20140612-00
require "ocs"

local cmdln = require "cmdline"
local fo = require "fo"
local tim = require "tim"
local maps = require "maps"
local accpos = require "accpos"

local depositId = ""
local entryFrom = ""
local entryTo = ""
local log_file = ""
local db_file = ""
local format = "PDF"

cmdln.add{ name="--logFile", descr="", func=function(x) log_file=x end }
cmdln.add{ name="--dbFile", descr="", func=function(x) db_file=x end }
cmdln.add{ name="--depositid", descr="", func=function(x) depositId=x end }
--cmdln.add{ name="--format", descr="", func=function(x) format=x end }
cmdln.add{ name="--from", descr="", func=function(x) entryFrom=x end }
cmdln.add{ name="--to", descr="",  func=function(x) entryTo=x end }

cmdln.parse( arg, true )
print("depositId: " .. depositId)
print("entryFrom: " .. entryFrom)
print("entryTo: " .. entryTo)
print("log_file: " .. log_file)
print("log_file: " .. log_file)
print("db_file: " .. db_file)
print("format: " .. format)

ocs.createInstance( "LUA" )

local dubi = require "dubi"
--self defined common module
local common = require "common"
local confirmreport = require "confirmreport"
local easygetter = require "easygetter"

common.CheckValidTimeRange(entryFrom, entryTo)

local CallForceMapping = {["Call"]="Call", ["Force"]="Force", ["None"]=""}
local debug_mode = false

local sql_column_text = ' TEXT DEFAULT "" '
local sql_column_integer = ' INTEGER DEFAULT 0'
local sql_column_real = ' REAL DEFAULT 0.0'
local table_name_deposit = "deposit"
local table_name_order = "DECIDE_order"
local table_name_order2 = "DECIDE_order2"
local database_tables = {
	{table_name_deposit, {'client_name'..sql_column_text, 
						'account_no'..sql_column_text, 
						'account_name'..sql_column_text, 
						'trader_id'..sql_column_text,						
						'credit_limit'..sql_column_real, 				
						'buy_limit'..sql_column_real, 
						'net_pos'..sql_column_text,
						'credit_calculation_method'..sql_column_text,
						'margin_calculation_method'..sql_column_text,
						'position_limit'..sql_column_text, 
						'control_margin_method'..sql_column_text,
						'use_min_fut_change'..sql_column_text,
						'can_mark_to_market'..sql_column_text, 
						'equity_balance_pre'..sql_column_real, 
						'equity_balance_current'..sql_column_real, 
						'excess_equity_bal_prev'..sql_column_real, 
						'excess_quity_bal_current'..sql_column_real,
						'mkt_to_mkt_fut_previous'..sql_column_real,
						'initial_margin_prev'..sql_column_real,
						'initial_margin_current'..sql_column_real,
						'maintenance_margin_prev'..sql_column_real,
						'maintenance_margin_current'..sql_column_real,
						'force_margin_prev'..sql_column_real,
						'force_margin_current'..sql_column_real,
						'min_cash_call_margin_prev'..sql_column_real,
						'cash_balance'..sql_column_real,
						'non_cash_collateral'..sql_column_real,
						'FC_collateral'..sql_column_real,
						'profit_loss'..sql_column_real,
						'premium'..sql_column_real,
						'call_margin_ammount'..sql_column_real, 
						'call_force_amount'..sql_column_real,
						"total_comm_vat"..sql_column_real, 
						'trade_date'..sql_column_text,  
						'settlement_date'..sql_column_text,
						}},
						
	{table_name_order, {'order_id'..sql_column_text,
						'trade_date'..sql_column_text,  
						'settlement_date'..sql_column_text,
						'session'..sql_column_text,
						'market'..sql_column_text,
						'underlying'..sql_column_text,
						'series'..sql_column_text, 
						'long_short'..sql_column_text, 
						'pos'..sql_column_text, 
						'vol'..sql_column_integer, 
						'match_vol'..sql_column_integer, 
						'match_price'..sql_column_real, 
						'multiplier'..sql_column_integer, 
						"comm_vat"..sql_column_real, 
						'actual_qty'..sql_column_integer,
						'avaialble_qty'..sql_column_integer,
						'unmatched_qty'..sql_column_integer,
						'total_cost'..sql_column_real,
						}},

  {table_name_order2, { 'series'..sql_column_text,
            'side'..sql_column_text,
            "onhand"..sql_column_real,
			"sellable"..sql_column_real,
            "cost"..sql_column_real,
            "mkt"..sql_column_real,
			"closed_quantity"..sql_column_real,
            "closed_average"..sql_column_real,
            "realized_pl"..sql_column_real,
            "unrealized_pl"..sql_column_real}}
}

common.CreateTables(db_file, log_file, database_tables, debug_mode)

local DECIDE_deposit_obj = fo.Deposit( tonumber(depositId) )

local depositList = {}
local depositItem = {}
table.insert (depositItem, {'account_no', DECIDE_deposit_obj:getNumber()}) 
table.insert (depositItem, {'account_name', DECIDE_deposit_obj:getNumber()})
table.insert (depositItem, {'net_pos', common.BoolleanToYNMapping[DECIDE_deposit_obj:hasShortLongNetting()]})

local client_obj = DECIDE_deposit_obj:getClient()
table.insert (depositItem, {'client_name', client_obj:getName()}) 
if( client_obj:hasAccountManager() ) then
	local account_manager = client_obj:getAccountManager()
	local trader_id = dubi.getSETTraderId( account_manager:getShortName())
	if( trader_id ~= nil) then
		-- ** pending to dev for multiple exchange
		table.insert (depositItem, {'trader_id', trader_id }) 
	end
end

-- Only Risk Array can is supported in DECIDE for now
table.insert (depositItem, {'margin_calculation_method', 'Risk Array'})
--**table.insert (depositItem, {'use_min_fut_change', ''})-- not available for now in Account Setting
--**table.insert (depositItem, {'min_cash_call_margin_prev', ''})-- not available for now in Limit & Risk

local orderVolLimit = easygetter.GetFirstActiveOVL(depositId)

local marginTask = nil
local margCalcSettings = nil
local orderVolumeRisk = nil

if (orderVolLimit ~= nil) then
	orderVolumeRisk = orderVolLimit:getUniqueRisk()
	if ( orderVolLimit:hasMarginTask() ) then
		marginTask = orderVolLimit:getMarginTask()
		margCalcSettings = marginTask:getMargCalcSettings()
	end
end

if ( orderVolLimit ~= nil ) then
	table.insert (depositItem, {'can_mark_to_market', common.BoolleanToYNMapping[orderVolLimit:includeUPL()] })
	table.insert (depositItem, {'buy_limit', easygetter.EvenAmountToDouble(orderVolLimit:getLimitAmount())})	
	table.insert (depositItem, {'equity_balance_pre', easygetter.EvenAmountToDouble(orderVolLimit:getPreviousEquityBalance()) })
	table.insert (depositItem, {'excess_equity_bal_prev', easygetter.EvenAmountToDouble(orderVolLimit:getPreviousExcessEquityBalance())})
	table.insert (depositItem, {'mkt_to_mkt_fut_previous', easygetter.EvenAmountToDouble(orderVolLimit:getPreviousFutureUPL())})
	table.insert (depositItem, {'initial_margin_prev', easygetter.EvenAmountToDouble(orderVolLimit:getPreviousInitialMargin())})
	table.insert (depositItem, {'maintenance_margin_prev', easygetter.EvenAmountToDouble(orderVolLimit:getPreviousMaintenaceMargin())})
	table.insert (depositItem, {'force_margin_prev', easygetter.EvenAmountToDouble(orderVolLimit:getPreviousForceMargin())})
	table.insert (depositItem, {'non_cash_collateral', easygetter.EvenAmountToDouble(orderVolLimit:getNonCashCollateral())})
	table.insert (depositItem, {'FC_collateral', easygetter.EvenAmountToDouble(orderVolLimit:getForeignCollateral())})
	
	--**table.insert (depositItem, {'profit_loss', })-- not available for now in Limit & Risk
	--**table.insert (depositItem, {'premium', })-- not available for now in Limit & Risk
end

if(margCalcSettings ~= nil) then
  table.insert (depositItem, {'credit_calculation_method', margCalcSettings:getName()})
end

if(orderVolumeRisk ~= nil) then				
  table.insert (depositItem, {'credit_limit', easygetter.EvenAmountToDouble(orderVolumeRisk:getCreditLimit()) })
  table.insert (depositItem, {'equity_balance_current', easygetter.EvenAmountToDouble(orderVolumeRisk:getEquityBalance())})
  table.insert (depositItem, {'excess_quity_bal_current',easygetter.EvenAmountToDouble(orderVolumeRisk:getExcessEquityBalance()) })
  table.insert (depositItem, {'cash_balance',easygetter.EvenAmountToDouble(orderVolumeRisk:getCashBalance()) })
  table.insert (depositItem, {'call_margin_ammount',easygetter.EvenAmountToDouble(orderVolumeRisk:getCallAmount()) })
  table.insert (depositItem, {'call_force_amount',easygetter.EvenAmountToDouble(orderVolumeRisk:getForceMargin()) })
  
  table.insert (depositItem, {'initial_margin_current', easygetter.EvenAmountToDouble(orderVolumeRisk:getPositionMargin()) })
  table.insert (depositItem, {'maintenance_margin_current', easygetter.EvenAmountToDouble(orderVolumeRisk:getMaintenanceMargin()) })
  table.insert (depositItem, {'force_margin_current', easygetter.EvenAmountToDouble(orderVolumeRisk:getForceMargin()) })
end

local orders = easygetter.GetOrders( depositId, entryFrom, entryTo )

local orderList = {}
local orderItem = {}

local total_comm_vat = 0
local have_get_trade_settlement_day = false

for _,no in pairs( orders ) do
	local order = fo.Order( no )

	local orderHandlingType = order:getHandlingType()
	if (orderHandlingType == 'TradingOrder' or orderHandlingType == 'BlockTrade') then		
		local orderlegs = order:getOrderLegs()
		for _,orderLeg in pairs(orderlegs) do
			orderItem = {}
			table.insert (orderItem, {'order_id', order:getOrderId()}) 
			local tradeDate = order:getEntryTime():getDateInUtcOffset(common.offsetTimeZoneSecs):toString("%Y%m%d")
			table.insert (orderItem, {'trade_date', tradeDate})
			local cdate = common.GetSettlementDateFromOrder(order);
			if( cdate ~= nil) then
				table.insert (orderItem, {'settlement_date', cdate:toString("%Y%m%d")})
				if( have_get_trade_settlement_day == false) then
					table.insert (depositItem, {'trade_date', tradeDate})
					table.insert (depositItem, {'settlement_date', cdate:toString("%Y%m%d")})
					have_get_trade_settlement_day = true
				end
			end

			--** pending to confirm
			local validTime = order:getValidTime()
			if ( validTime:isUnused() ) then
				table.insert (orderItem, {'session', 'GTC'})
			else
				if (validTime:getClockTime("MIDNIGHT_24"):compare( tim.ClockTime.max() ) < 0 ) then
					table.insert (orderItem, {'session', 'Day'})
				else
					table.insert (orderItem, {'session', 'Night'})
				end
			end
			
			if(order:hasTradingChannel()) then
				table.insert (orderItem, {'market',order:getExchange():getName() })
			end
			
			
			local orderLegContract = orderLeg:getContract()
			if( orderLegContract:hasUnderlying()) then
				table.insert (orderItem, {'underlying',orderLegContract:getInstrument():getUnderlyingInstrument():getName()})	
			end
			
			table.insert (orderItem, {'series', orderLegContract:getContractCode()})
			
			local LongShort = common.BuySellToLSMapping[orderLeg:getOrderKind()] or ''
			
			table.insert (orderItem, {'long_short', LongShort})

			table.insert (orderItem, {'pos', orderLeg:getOpenClose()})

			local open_qty = orderLeg:getOpenQty()
			
			local cancel_qty = 0
			-- BA to confirm whether need to include the expire order as cancel qty
			if(order:getStatus() == "Closed" and 
				(order:getOrderClosedBy()=="PartExecCancel" or order:getOrderClosedBy()=="NoExecCancel" ) ) then
				cancel_qty = orderLeg:getTotalQty()-orderLeg:getExecQty()
			end
			
			local match_qty = orderLeg:getExecQty()
			table.insert (orderItem, {'match_vol', match_qty})
	
      local tick_factor = 1
			local matched_value = 0
			if (match_qty ~= 0 ) then
				-- Use value day for tickfactor for matched value.
        if (cdate ~= nil) then
          tick_factor = easygetter.EvenAmountToDouble(orderLeg:getContract():getTickFactor(nil,cdate));
        end
				local match_avg_price =  orderLeg:getAvgExecPrice()
				table.insert (orderItem, {'match_price', match_avg_price})
				table.insert (orderItem, {'multiplier', tick_factor})
			end
			
			-- total qty = matched qty + open/cancel qty
			table.insert (orderItem, {'vol', match_qty + open_qty + cancel_qty})
					
			local comm_vat = 0
			for _,op in pairs( order:getOrderOperations() ) do
				if op:getTransactionType() == "Match" then
					local oplegs = op:getOrderOperationLegs()
					if (#oplegs ~= 1) then
						confirmreport.announceGenerationFailure("One order operation should and only should have one order opeation legs!")
						print("One order operation should and only should have one order opeation legs!")
						os.exit(1)
					elseif(oplegs[1]:getContract():getContractCode() == orderLeg:getContract():getContractCode()) then
            local opleg = oplegs[1]
            if (opleg:hasTransaction()) then
              local ta = opleg:getEffectiveTransaction()
              local posting = fo.Posting(ta,1)
              if (posting:hasFeeValue(nil,maps.NameToFee("Custodian")) ) then
                local comm = easygetter.EvenAmountToDouble(posting:getFeeAccountCurr(nil,maps.NameToFee("Custodian")))
                local vat = easygetter.EvenAmountToDouble(posting:getFeeAccountCurr(nil,maps.NameToFee("Settlement")))
                -- comm_vat = comm_vat + easygetter.EvenAmountToDouble(posting:getFeeAccountCurr(nil,maps.NameToFee("Custodian")))
                local exch_fee_settle_curr = easygetter.EvenAmountToDouble(posting:getFeeAccountCurr(nil,maps.NameToFee("Exchange")))
                -- confirm with BA that there are two methods to get comm+vat. The value of comm+vat should be the value of TotalCostSettleCurr in Transactions. reference the doc of FeeClarification (george guo)
                comm_vat = comm_vat + comm + vat + exch_fee_settle_curr
                table.insert (orderItem, {'comm_vat', comm_vat})
              end
            end
					end
				end
			end

--			table.insert (orderItem, {'comm_vat', comm_vat})
			total_comm_vat = total_comm_vat + comm_vat

			table.insert (orderList, orderItem) 
		end				
		
	end
end

--if not have any match transaction above
--[[if(have_get_trade_settlement_day == false) then 
	local fromTimeStampObj = tim.msecsSince1970ToTimeStamp( tonumber(entryFromMillSec))	
	-- with 7*3600 second's UTC offset
	local fromThaiDate  = fromTimeStampObj:getDateInUtcOffset(common.offsetTimeZoneSecs)
	table.insert (depositItem, {'trade_date', fromThaiDate:toString("%Y%m%d")})
end--]]

  local p="(%d+)-(%d+)-(%d+)T(%d+):(%d+):(%d+)"
  local year,month,day,hour,min,sec=entryFrom:match(p)

 --local fromTimeStampObj = tim.msecsSince1970ToTimeStamp( tonumber(entryFromMillSec)) 
 -- with 7*3600 second's UTC offset
 --local fromThaiDate  = fromTimeStampObj:getDateInUtcOffset(common.offsetTimeZoneSecs)
 table.insert (depositItem, {'trade_date', year..month..day})


table.insert (depositItem, {'total_comm_vat', total_comm_vat})
table.insert (depositList, depositItem)

common.InsertRecords(db_file, log_file, table_name_deposit, depositList, debug_mode)
common.InsertRecords(db_file, log_file, table_name_order, orderList, debug_mode)

local orderList2 = {}
local from = tim.TimeStamp( entryFrom )
local to = tim.TimeStamp( entryTo )

local position_list = DECIDE_deposit_obj:getAccPositions()   -- get a list of positions
for _,position in pairs ( position_list ) do
  local data = accpos.getPositionValues( position, from , to, DECIDE_deposit_obj:getGeneralLedgerCurrencyType() )
  local data_effective_status = data.effective
  if ( data_effective_status == "Yes" ) then
    local orderItem2 = {}

    local contract = position:getContract()
    table.insert (orderItem2, {'series', contract:getContractCode()})
	
	local sellable = easygetter.EvenAmountToDouble(data.endQuantity)
    table.insert (orderItem2, {'sellable', sellable})

    local average = easygetter.EvenAmountToDouble(data.endAveragePrice)
    table.insert (orderItem2, {'cost', average})

    local mark_average = easygetter.EvenAmountToDouble(data.lastUnchecked)
    table.insert (orderItem2, {'mkt', mark_average})

    local position_short_long = position:getShortLong()
    table.insert (orderItem2, {'side', position_short_long})

	local on_hand = 0
    if ( position_short_long == "Long" ) then
      local sellQuantity = easygetter.EvenAmountToDouble(data.sellQuantity)
      table.insert (orderItem2, {'closed_quantity', sellQuantity})
      local sell_average = easygetter.EvenAmountToDouble(data.sellAveragePrice)
      table.insert (orderItem2, {'closed_average', sell_average})
      on_hand = sellable - easygetter.EvenAmountToDouble(data.unmatchedSellOrders)
    elseif ( position_short_long == "Short" ) then
      local buyQuantity = easygetter.EvenAmountToDouble(data.buyQuantity)
      table.insert (orderItem2, {'closed_quantity', buyQuantity})
      local buy_average = easygetter.EvenAmountToDouble(data.buyAveragePrice)
      table.insert (orderItem2, {'closed_average', buy_average})
      on_hand = sellable - easygetter.EvenAmountToDouble(data.unmatchedBuyOrders)
    end
    table.insert (orderItem2, {'onhand', on_hand})
	
    local realized = easygetter.EvenAmountToDouble(data.startToEndRPL)
    table.insert (orderItem2, {'realized_pl', realized})
    local unrealized = easygetter.EvenAmountToDouble(data.endUPL)
    table.insert (orderItem2, {'unrealized_pl', unrealized})

    table.insert (orderList2, orderItem2)
  end
end

common.InsertRecords(db_file, log_file, table_name_order2, orderList2, debug_mode)