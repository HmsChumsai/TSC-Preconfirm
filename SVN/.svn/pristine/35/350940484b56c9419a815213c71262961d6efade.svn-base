TSCReportUtil={}
local utils = require('utils')
local tim = require('tim')
function TSCReportUtil.getOrderList(orders,isBillOrder)
	print('----------- Start getOrderList--------')
  local orderMatchStatusToMLMapping = {[true]="M", [false]="P"}
	local orderList= {}
	local totalList={}
	local totalItem={}
  local net=0.0
	local total_gross = 0.0
	local total_amount_due = 0.0
	for _,no in pairs(orders) do 
		local order = fo.Order( no )
    local orderHandlingType = order:getHandlingType()
    if (orderHandlingType == 'TradingOrder' or orderHandlingType == 'BlockTrade') then
      local orderlegs = order:getOrderLegs()
      print("No. of orderlegs : ",#orderlegs)
			for _,orderleg in pairs(orderlegs) do
        local match_qty = orderleg:getExecQty()
        print('order_num : ',no)
        print('match_qty : ',match_qty)
        
        if (match_qty~=0 or isBillOrder==1 ) then	
          local orderItem = {}
          local vol=0
          local price=0
          local symbol= fo.getOrderContract(order):getSymbol() 
          local buy_sell = order:getBuySell()
          local execQty = orderleg:getExecQty()
          local status = orderMatchStatusToMLMapping[totalQty == execQty]
          local tran_time=0
          if (isBillOrder==1) then
            local entry=order:getEntryUser():getName()
						vol = orderleg:getTotalQty()
            price = orderleg:getPriceLimit()
						for _,op in pairs( order:getOrderOperations() ) do
							if op:getTransactionType() ~= "Match" then	-- get transaction time
								tran_time=op:getEntryTime():getClockTimeInUtcOffset(common.offsetTimeZoneSecs):toString("%T")
							end
						end
            time =order:getEntryTime():getClockTimeInUtcOffset(common.offsetTimeZoneSecs):toString("%T") 
            local totalQty = orderleg:getOpenQty()
            if (match_qty~= 0 ) then
              table.insert (orderItem, {'match_price',execQty })
              table.insert(orderItem,{'match_qty',match_qty})
              table.insert(orderItem,{'matched',match_qty})
            end
						table.insert(orderItem,{'entry',entry})
            table.insert(orderItem,{'time',time})
						table.insert(orderItem,{'tran_time',tran_time})
            table.insert(orderItem, {'st', M.getStatus(order:getOrderId())})
          else
            price = orderleg:getAvgExecPrice()
            price = easygetter.EvenAmountToDouble(price)
            vol = execQty
          end
					local comm_vat = getFee(order,orderleg)

          local comm_fee = comm_vat/(1.07)
          local vat=comm_vat-comm_fee
          local gross_amt=vol*price
          local amount_due=0.0

          if (buy_sell=='Buy') then
            amount_due=gross_amt+comm_fee+vat
						total_gross=total_gross-gross_amt
						total_amount_due = total_amount_due-(gross_amt+comm_vat)
            net = net-amount_due
          else
            amount_due=gross_amt+(comm_fee+vat)
						total_amount_due = total_amount_due+(gross_amt-comm_vat)
						total_gross=total_gross+gross_amt
            net = net + amount_due
          end
					table.insert (orderItem,{'order_no',no})
          table.insert (orderItem,{'stock',symbol})
          table.insert (orderItem,{'side',buy_sell})
          table.insert (orderItem,{'vol',vol})
          table.insert (orderItem,{'comm_fee',comm_fee})
          table.insert (orderItem,{'vat',vat})
          table.insert (orderItem,{'price',price})
          table.insert (orderItem,{'gross_amt',gross_amt})
          table.insert (orderItem,{'amount_due',amount_due})
          table.insert(orderList,orderItem)
        end
      end
    end
  end
  if (net<0) then
    paid_received = "Paid "

  else
    paid_received = "Received " 
  end
  table.insert(totalItem,{'net',net})
  table.insert(totalItem,{'paid_received',paid_received})
	table.insert(totalItem,{'total_gross',total_gross})
	table.insert(totalItem,{'total_amount_due',total_amount_due})
	table.insert(totalList,totalItem)
	print('----------- End getOrderList--------')
	return orderList,totalList
end

function getFee(order, orderLeg, ut)
	print(" Get Fee in TSCReportUtils")
  local fee = 0
	for _, execution in ipairs(order:getEffectiveExecutions(ut)) do
    local leg = execution:getOrderLeg(ut)
    if leg:getOrder() == order and leg:getLegIndex() == orderLeg:getLegIndex() then
      local data = execution:getData(ut)
			print("data.amountp : ",data.amountp:asDouble())
			print("data.netAmountP : ",data.netAmountP:asDouble())
      fee = fee + math.abs(data.amountp:asDouble() - data.netAmountP:asDouble())
		end
  end
  return fee
end

function getNextBusDate(stDate)	
	stDate=tim.Date(stDate)
	print('Type of stDate : '..type(stDate))
	local nextDate=''
	--stDate=tim.TimeStamp(stDate):toString("%d/%m/%y")
	local businesscenter = fo.BusinessCenter("THAILAND")
	local tradingCalendar = businesscenter:getTradingCalendar()
	local nextDate= tradingCalendar:addActiveDays( stDate,1, isNONE ):toString("%d/%m/%y")
	print('nextDate : ',nextDate)
	return nextDate
	
end

local hasLimitValue = function(limittype)
  local list = {
    Limit = true,
    LimitIceberg = true,
    OrMarketOnClose = true,
    OneCancelsOtherL = true,
    OneCancelsOtherM = true
  }
  return list[limittype]
end

return TSCReportUtil
